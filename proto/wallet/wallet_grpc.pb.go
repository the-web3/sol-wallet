// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: rpc/wallet.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WalletService_SubmitWithdrawInfo_FullMethodName   = "/services.thewebthree.wallet.WalletService/submitWithdrawInfo"
	WalletService_DepositNotify_FullMethodName        = "/services.thewebthree.wallet.WalletService/depositNotify"
	WalletService_WithdrawNotify_FullMethodName       = "/services.thewebthree.wallet.WalletService/withdrawNotify"
	WalletService_VerifyAddress_FullMethodName        = "/services.thewebthree.wallet.WalletService/verifyAddress"
	WalletService_VerifyWithdrawSign_FullMethodName   = "/services.thewebthree.wallet.WalletService/verifyWithdrawSign"
	WalletService_VerifyRiskDOrWNotify_FullMethodName = "/services.thewebthree.wallet.WalletService/verifyRiskDOrWNotify"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	SubmitWithdrawInfo(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawRep, error)
	DepositNotify(ctx context.Context, in *DepositNotifyReq, opts ...grpc.CallOption) (*DepositNotifyRep, error)
	WithdrawNotify(ctx context.Context, in *WithdrawNotifyReq, opts ...grpc.CallOption) (*WithdrawNotifyRep, error)
	VerifyAddress(ctx context.Context, in *RiskVerifyAddressReq, opts ...grpc.CallOption) (*RiskVerifyAddressRep, error)
	VerifyWithdrawSign(ctx context.Context, in *RiskWithdrawVerifyReq, opts ...grpc.CallOption) (*RiskWithdrawVerifyRep, error)
	VerifyRiskDOrWNotify(ctx context.Context, in *RiskDOrWNotifyVerifyReq, opts ...grpc.CallOption) (*RiskDOrWNotifyVerifyRep, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) SubmitWithdrawInfo(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawRep, error) {
	out := new(WithdrawRep)
	err := c.cc.Invoke(ctx, WalletService_SubmitWithdrawInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DepositNotify(ctx context.Context, in *DepositNotifyReq, opts ...grpc.CallOption) (*DepositNotifyRep, error) {
	out := new(DepositNotifyRep)
	err := c.cc.Invoke(ctx, WalletService_DepositNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WithdrawNotify(ctx context.Context, in *WithdrawNotifyReq, opts ...grpc.CallOption) (*WithdrawNotifyRep, error) {
	out := new(WithdrawNotifyRep)
	err := c.cc.Invoke(ctx, WalletService_WithdrawNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) VerifyAddress(ctx context.Context, in *RiskVerifyAddressReq, opts ...grpc.CallOption) (*RiskVerifyAddressRep, error) {
	out := new(RiskVerifyAddressRep)
	err := c.cc.Invoke(ctx, WalletService_VerifyAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) VerifyWithdrawSign(ctx context.Context, in *RiskWithdrawVerifyReq, opts ...grpc.CallOption) (*RiskWithdrawVerifyRep, error) {
	out := new(RiskWithdrawVerifyRep)
	err := c.cc.Invoke(ctx, WalletService_VerifyWithdrawSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) VerifyRiskDOrWNotify(ctx context.Context, in *RiskDOrWNotifyVerifyReq, opts ...grpc.CallOption) (*RiskDOrWNotifyVerifyRep, error) {
	out := new(RiskDOrWNotifyVerifyRep)
	err := c.cc.Invoke(ctx, WalletService_VerifyRiskDOrWNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility
type WalletServiceServer interface {
	SubmitWithdrawInfo(context.Context, *WithdrawReq) (*WithdrawRep, error)
	DepositNotify(context.Context, *DepositNotifyReq) (*DepositNotifyRep, error)
	WithdrawNotify(context.Context, *WithdrawNotifyReq) (*WithdrawNotifyRep, error)
	VerifyAddress(context.Context, *RiskVerifyAddressReq) (*RiskVerifyAddressRep, error)
	VerifyWithdrawSign(context.Context, *RiskWithdrawVerifyReq) (*RiskWithdrawVerifyRep, error)
	VerifyRiskDOrWNotify(context.Context, *RiskDOrWNotifyVerifyReq) (*RiskDOrWNotifyVerifyRep, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (UnimplementedWalletServiceServer) SubmitWithdrawInfo(context.Context, *WithdrawReq) (*WithdrawRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWithdrawInfo not implemented")
}
func (UnimplementedWalletServiceServer) DepositNotify(context.Context, *DepositNotifyReq) (*DepositNotifyRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositNotify not implemented")
}
func (UnimplementedWalletServiceServer) WithdrawNotify(context.Context, *WithdrawNotifyReq) (*WithdrawNotifyRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawNotify not implemented")
}
func (UnimplementedWalletServiceServer) VerifyAddress(context.Context, *RiskVerifyAddressReq) (*RiskVerifyAddressRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAddress not implemented")
}
func (UnimplementedWalletServiceServer) VerifyWithdrawSign(context.Context, *RiskWithdrawVerifyReq) (*RiskWithdrawVerifyRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWithdrawSign not implemented")
}
func (UnimplementedWalletServiceServer) VerifyRiskDOrWNotify(context.Context, *RiskDOrWNotifyVerifyReq) (*RiskDOrWNotifyVerifyRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRiskDOrWNotify not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_SubmitWithdrawInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SubmitWithdrawInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SubmitWithdrawInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SubmitWithdrawInfo(ctx, req.(*WithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DepositNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DepositNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DepositNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DepositNotify(ctx, req.(*DepositNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WithdrawNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WithdrawNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_WithdrawNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WithdrawNotify(ctx, req.(*WithdrawNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_VerifyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiskVerifyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).VerifyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_VerifyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).VerifyAddress(ctx, req.(*RiskVerifyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_VerifyWithdrawSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiskWithdrawVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).VerifyWithdrawSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_VerifyWithdrawSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).VerifyWithdrawSign(ctx, req.(*RiskWithdrawVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_VerifyRiskDOrWNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiskDOrWNotifyVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).VerifyRiskDOrWNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_VerifyRiskDOrWNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).VerifyRiskDOrWNotify(ctx, req.(*RiskDOrWNotifyVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.thewebthree.wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "submitWithdrawInfo",
			Handler:    _WalletService_SubmitWithdrawInfo_Handler,
		},
		{
			MethodName: "depositNotify",
			Handler:    _WalletService_DepositNotify_Handler,
		},
		{
			MethodName: "withdrawNotify",
			Handler:    _WalletService_WithdrawNotify_Handler,
		},
		{
			MethodName: "verifyAddress",
			Handler:    _WalletService_VerifyAddress_Handler,
		},
		{
			MethodName: "verifyWithdrawSign",
			Handler:    _WalletService_VerifyWithdrawSign_Handler,
		},
		{
			MethodName: "verifyRiskDOrWNotify",
			Handler:    _WalletService_VerifyRiskDOrWNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/wallet.proto",
}
